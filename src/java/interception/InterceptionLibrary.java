package interception;
import com.ochafik.lang.jnaerator.runtime.LibraryExtractor;
import com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
/**
 * JNA Wrapper for library <b>interception</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface InterceptionLibrary extends Library {
    public static final String JNA_LIBRARY_NAME = LibraryExtractor.getLibraryPath("interception", true, InterceptionLibrary.class);
    public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(InterceptionLibrary.JNA_LIBRARY_NAME, MangledFunctionMapper.DEFAULT_OPTIONS);
    public static final InterceptionLibrary INSTANCE = (InterceptionLibrary)Native.loadLibrary(InterceptionLibrary.JNA_LIBRARY_NAME, InterceptionLibrary.class, MangledFunctionMapper.DEFAULT_OPTIONS);
    /**
     * <i>native declaration : line 55</i><br>
     * enum values
     */
    public static interface InterceptionKeyState {
        /// <i>native declaration : line 57</i>
        public static final int INTERCEPTION_KEY_DOWN = (int)0x00;
        /// <i>native declaration : line 58</i>
        public static final int INTERCEPTION_KEY_UP = (int)0x01;
        /// <i>native declaration : line 59</i>
        public static final int INTERCEPTION_KEY_E0 = (int)0x02;
        /// <i>native declaration : line 60</i>
        public static final int INTERCEPTION_KEY_E1 = (int)0x04;
        /// <i>native declaration : line 61</i>
        public static final int INTERCEPTION_KEY_TERMSRV_SET_LED = (int)0x08;
        /// <i>native declaration : line 62</i>
        public static final int INTERCEPTION_KEY_TERMSRV_SHADOW = (int)0x10;
        /// <i>native declaration : line 63</i>
        public static final int INTERCEPTION_KEY_TERMSRV_VKPACKET = (int)0x20;
    };
    /**
     * <i>native declaration : line 66</i><br>
     * enum values
     */
    public static interface InterceptionFilterKeyState {
        /// <i>native declaration : line 68</i>
        public static final int INTERCEPTION_FILTER_KEY_NONE = (int)0x0000;
        /// <i>native declaration : line 69</i>
        public static final int INTERCEPTION_FILTER_KEY_ALL = (int)0xFFFF;
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 70</i><br>
         * INTERCEPTION_FILTER_KEY_DOWN = INTERCEPTION_KEY_UP
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 71</i><br>
         * INTERCEPTION_FILTER_KEY_UP = INTERCEPTION_KEY_UP << 1
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 72</i><br>
         * INTERCEPTION_FILTER_KEY_E0 = INTERCEPTION_KEY_E0 << 1
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 73</i><br>
         * INTERCEPTION_FILTER_KEY_E1 = INTERCEPTION_KEY_E1 << 1
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 74</i><br>
         * INTERCEPTION_FILTER_KEY_TERMSRV_SET_LED = INTERCEPTION_KEY_TERMSRV_SET_LED << 1
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 75</i><br>
         * INTERCEPTION_FILTER_KEY_TERMSRV_SHADOW = INTERCEPTION_KEY_TERMSRV_SHADOW << 1
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 76</i><br>
         * INTERCEPTION_FILTER_KEY_TERMSRV_VKPACKET = INTERCEPTION_KEY_TERMSRV_VKPACKET << 1
         */
    };
    /**
     * <i>native declaration : line 79</i><br>
     * enum values
     */
    public static interface InterceptionMouseState {
        /// <i>native declaration : line 81</i>
        public static final int INTERCEPTION_MOUSE_LEFT_BUTTON_DOWN = (int)0x001;
        /// <i>native declaration : line 82</i>
        public static final int INTERCEPTION_MOUSE_LEFT_BUTTON_UP = (int)0x002;
        /// <i>native declaration : line 83</i>
        public static final int INTERCEPTION_MOUSE_RIGHT_BUTTON_DOWN = (int)0x004;
        /// <i>native declaration : line 84</i>
        public static final int INTERCEPTION_MOUSE_RIGHT_BUTTON_UP = (int)0x008;
        /// <i>native declaration : line 85</i>
        public static final int INTERCEPTION_MOUSE_MIDDLE_BUTTON_DOWN = (int)0x010;
        /// <i>native declaration : line 86</i>
        public static final int INTERCEPTION_MOUSE_MIDDLE_BUTTON_UP = (int)0x020;
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 88</i><br>
         * INTERCEPTION_MOUSE_BUTTON_1_DOWN = INTERCEPTION_MOUSE_LEFT_BUTTON_DOWN
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 89</i><br>
         * INTERCEPTION_MOUSE_BUTTON_1_UP = INTERCEPTION_MOUSE_LEFT_BUTTON_UP
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 90</i><br>
         * INTERCEPTION_MOUSE_BUTTON_2_DOWN = INTERCEPTION_MOUSE_RIGHT_BUTTON_DOWN
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 91</i><br>
         * INTERCEPTION_MOUSE_BUTTON_2_UP = INTERCEPTION_MOUSE_RIGHT_BUTTON_UP
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 92</i><br>
         * INTERCEPTION_MOUSE_BUTTON_3_DOWN = INTERCEPTION_MOUSE_MIDDLE_BUTTON_DOWN
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 93</i><br>
         * INTERCEPTION_MOUSE_BUTTON_3_UP = INTERCEPTION_MOUSE_MIDDLE_BUTTON_UP
         */
        /// <i>native declaration : line 95</i>
        public static final int INTERCEPTION_MOUSE_BUTTON_4_DOWN = (int)0x040;
        /// <i>native declaration : line 96</i>
        public static final int INTERCEPTION_MOUSE_BUTTON_4_UP = (int)0x080;
        /// <i>native declaration : line 97</i>
        public static final int INTERCEPTION_MOUSE_BUTTON_5_DOWN = (int)0x100;
        /// <i>native declaration : line 98</i>
        public static final int INTERCEPTION_MOUSE_BUTTON_5_UP = (int)0x200;
        /// <i>native declaration : line 100</i>
        public static final int INTERCEPTION_MOUSE_WHEEL = (int)0x400;
        /// <i>native declaration : line 101</i>
        public static final int INTERCEPTION_MOUSE_HWHEEL = (int)0x800;
    };
    /**
     * <i>native declaration : line 104</i><br>
     * enum values
     */
    public static interface InterceptionFilterMouseState {
        /// <i>native declaration : line 106</i>
        public static final int INTERCEPTION_FILTER_MOUSE_NONE = (int)0x0000;
        /// <i>native declaration : line 107</i>
        public static final int INTERCEPTION_FILTER_MOUSE_ALL = (int)0xFFFF;
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 109</i><br>
         * INTERCEPTION_FILTER_MOUSE_LEFT_BUTTON_DOWN = INTERCEPTION_MOUSE_LEFT_BUTTON_DOWN
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 110</i><br>
         * INTERCEPTION_FILTER_MOUSE_LEFT_BUTTON_UP = INTERCEPTION_MOUSE_LEFT_BUTTON_UP
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 111</i><br>
         * INTERCEPTION_FILTER_MOUSE_RIGHT_BUTTON_DOWN = INTERCEPTION_MOUSE_RIGHT_BUTTON_DOWN
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 112</i><br>
         * INTERCEPTION_FILTER_MOUSE_RIGHT_BUTTON_UP = INTERCEPTION_MOUSE_RIGHT_BUTTON_UP
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 113</i><br>
         * INTERCEPTION_FILTER_MOUSE_MIDDLE_BUTTON_DOWN = INTERCEPTION_MOUSE_MIDDLE_BUTTON_DOWN
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 114</i><br>
         * INTERCEPTION_FILTER_MOUSE_MIDDLE_BUTTON_UP = INTERCEPTION_MOUSE_MIDDLE_BUTTON_UP
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 116</i><br>
         * INTERCEPTION_FILTER_MOUSE_BUTTON_1_DOWN = INTERCEPTION_MOUSE_BUTTON_1_DOWN
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 117</i><br>
         * INTERCEPTION_FILTER_MOUSE_BUTTON_1_UP = INTERCEPTION_MOUSE_BUTTON_1_UP
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 118</i><br>
         * INTERCEPTION_FILTER_MOUSE_BUTTON_2_DOWN = INTERCEPTION_MOUSE_BUTTON_2_DOWN
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 119</i><br>
         * INTERCEPTION_FILTER_MOUSE_BUTTON_2_UP = INTERCEPTION_MOUSE_BUTTON_2_UP
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 120</i><br>
         * INTERCEPTION_FILTER_MOUSE_BUTTON_3_DOWN = INTERCEPTION_MOUSE_BUTTON_3_DOWN
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 121</i><br>
         * INTERCEPTION_FILTER_MOUSE_BUTTON_3_UP = INTERCEPTION_MOUSE_BUTTON_3_UP
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 123</i><br>
         * INTERCEPTION_FILTER_MOUSE_BUTTON_4_DOWN = INTERCEPTION_MOUSE_BUTTON_4_DOWN
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 124</i><br>
         * INTERCEPTION_FILTER_MOUSE_BUTTON_4_UP = INTERCEPTION_MOUSE_BUTTON_4_UP
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 125</i><br>
         * INTERCEPTION_FILTER_MOUSE_BUTTON_5_DOWN = INTERCEPTION_MOUSE_BUTTON_5_DOWN
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 126</i><br>
         * INTERCEPTION_FILTER_MOUSE_BUTTON_5_UP = INTERCEPTION_MOUSE_BUTTON_5_UP
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 128</i><br>
         * INTERCEPTION_FILTER_MOUSE_WHEEL = INTERCEPTION_MOUSE_WHEEL
         */
        /**
         * SKIPPED:<br>
         * <i>native declaration : line 129</i><br>
         * INTERCEPTION_FILTER_MOUSE_HWHEEL = INTERCEPTION_MOUSE_HWHEEL
         */
        /// <i>native declaration : line 131</i>
        public static final int INTERCEPTION_FILTER_MOUSE_MOVE = (int)0x1000;
    };
    /**
     * <i>native declaration : line 134</i><br>
     * enum values
     */
    public static interface InterceptionMouseFlag {
        /// <i>native declaration : line 136</i>
        public static final int INTERCEPTION_MOUSE_MOVE_RELATIVE = (int)0x000;
        /// <i>native declaration : line 137</i>
        public static final int INTERCEPTION_MOUSE_MOVE_ABSOLUTE = (int)0x001;
        /// <i>native declaration : line 138</i>
        public static final int INTERCEPTION_MOUSE_VIRTUAL_DESKTOP = (int)0x002;
        /// <i>native declaration : line 139</i>
        public static final int INTERCEPTION_MOUSE_ATTRIBUTES_CHANGED = (int)0x004;
        /// <i>native declaration : line 140</i>
        public static final int INTERCEPTION_MOUSE_MOVE_NOCOALESCE = (int)0x008;
        /// <i>native declaration : line 141</i>
        public static final int INTERCEPTION_MOUSE_TERMSRV_SRC_SHADOW = (int)0x100;
    };
    public static final int INTERCEPTION_MAX_DEVICE = (int)((10) + (10));
    public static final int INTERCEPTION_MAX_MOUSE = (int)10;
    public static final int INTERCEPTION_MAX_KEYBOARD = (int)10;
    public interface InterceptionPredicate extends Callback {
        int apply(int device);
    };
    /**
     * Original signature : <code>__attribute__((dllimport)) InterceptionContext interception_create_context()</code><br>
     * <i>native declaration : line 163</i>
     */
    Pointer interception_create_context();
    /**
     * Original signature : <code>__attribute__((dllimport)) void interception_destroy_context(InterceptionContext)</code><br>
     * <i>native declaration : line 165</i>
     */
    void interception_destroy_context(Pointer context);
    /**
     * Original signature : <code>__attribute__((dllimport)) InterceptionPrecedence interception_get_precedence(InterceptionContext, InterceptionDevice)</code><br>
     * <i>native declaration : line 167</i>
     */
    int interception_get_precedence(Pointer context, int device);
    /**
     * Original signature : <code>__attribute__((dllimport)) void interception_set_precedence(InterceptionContext, InterceptionDevice, InterceptionPrecedence)</code><br>
     * <i>native declaration : line 169</i>
     */
    void interception_set_precedence(Pointer context, int device, int precedence);
    /**
     * Original signature : <code>__attribute__((dllimport)) InterceptionFilter interception_get_filter(InterceptionContext, InterceptionDevice)</code><br>
     * <i>native declaration : line 171</i>
     */
    short interception_get_filter(Pointer context, int device);
    /**
     * Original signature : <code>__attribute__((dllimport)) void interception_set_filter(InterceptionContext, InterceptionPredicate, InterceptionFilter)</code><br>
     * <i>native declaration : line 173</i>
     */
    void interception_set_filter(Pointer context, InterceptionLibrary.InterceptionPredicate predicate, short filter);
    /**
     * Original signature : <code>__attribute__((dllimport)) InterceptionDevice interception_wait(InterceptionContext)</code><br>
     * <i>native declaration : line 175</i>
     */
    int interception_wait(Pointer context);
    /**
     * Original signature : <code>__attribute__((dllimport)) InterceptionDevice interception_wait_with_timeout(InterceptionContext, unsigned long)</code><br>
     * <i>native declaration : line 177</i>
     */
    int interception_wait_with_timeout(Pointer context, NativeLong milliseconds);
    /**
     * Original signature : <code>__attribute__((dllimport)) int interception_send(InterceptionContext, InterceptionDevice, const InterceptionStroke*, unsigned int)</code><br>
     * <i>native declaration : line 179</i>
     */
    int interception_send(Pointer context, int device, Pointer stroke, int nstroke);
    /**
     * Original signature : <code>__attribute__((dllimport)) int interception_receive(InterceptionContext, InterceptionDevice, InterceptionStroke*, unsigned int)</code><br>
     * <i>native declaration : line 181</i>
     */
    int interception_receive(Pointer context, int device, Pointer stroke, int nstroke);
    /**
     * Original signature : <code>__attribute__((dllimport)) int interception_is_invalid(InterceptionDevice)</code><br>
     * <i>native declaration : line 183</i>
     */
    int interception_is_invalid(int device);
    /**
     * Original signature : <code>__attribute__((dllimport)) int interception_is_keyboard(InterceptionDevice)</code><br>
     * <i>native declaration : line 185</i>
     */
    int interception_is_keyboard(int device);
    /**
     * Original signature : <code>__attribute__((dllimport)) int interception_is_mouse(InterceptionDevice)</code><br>
     * <i>native declaration : line 187</i>
     */
    int interception_is_mouse(int device);
}
